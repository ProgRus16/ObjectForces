import telebot
import os
import socket
from gigachat import GigaChat
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
HOST = "127.0.0.1"
PORT = 65432
SAVE_DIR = 'submissions'
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –ø—É–±–ª–∏—á–µ–Ω!)
bot = telebot.TeleBot("8310217352:AAEJlCKcJcneY6gQ8zhDKUhRGVZCMNOZe0Q")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á (–º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
tasks_list = [
    {"code": "00-000-0-0-0", "title": "–ó–∞–¥–∞—á–∞ ‚Ññ1"},
    {"code": "00-001-0-0-0", "title": "–ó–∞–¥–∞—á–∞ ‚Ññ2"},
    {"code": "00-002-0-0-0", "title": "–ó–∞–¥–∞—á–∞ ‚Ññ3"},
    {"code": "01-001-1-3-2", "title": "–í–°–û–® –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, 20/21, –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, 9 –∫–ª–∞—Å—Å, –∑–∞–¥–∞—á–∞ 2"}
]

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
def create_tasks_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    for task in tasks_list:
        button = telebot.types.InlineKeyboardButton(task["title"], callback_data=f'task_{task["code"]}')
        keyboard.add(button)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start/help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    user_states[user_id] = {'step': 'waiting_user_code'}
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=create_tasks_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á
@bot.callback_query_handler(func=lambda call: True)
def process_callback_button(call):
    user_id = call.from_user.id
    task_code = call.data.split('_')[1]
    user_states[user_id]['task_code'] = task_code
    bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É "+task_code)
    bot.send_message(chat_id=user_id, text=f"–í–∞—à –≤—ã–±–æ—Ä: –∑–∞–¥–∞—á–∞ {task_code}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text', 'document'])
def handle_all_messages(message):
    user_id = message.from_user.id
    state_info = user_states.get(user_id)
    
    if not state_info or 'task_code' not in state_info:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        if state_info['step'] == 'waiting_user_code':
            user_code = message.text.strip()
            if not user_code:
                bot.reply_to(message, "–í–∞—à –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
                return

            user_states[user_id]['user_code'] = user_code
            bot.reply_to(message, f"‚úÖ –í–∞—à –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª):")
            state_info['step'] = 'waiting_answer'
        
        elif state_info['step'] == 'waiting_answer':
            task_code = state_info['task_code']
            user_code = state_info['user_code']
            
            file_path = None

            if message.content_type == 'text':
                answer_text = message.text
                file_path = os.path.join(SAVE_DIR, f"{task_code}_{user_code}.txt")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(answer_text)

                
            elif message.content_type == 'document':
                file_info = bot.get_file(message.document.file_id)
                file_name = message.document.file_name
                file_path = os.path.join(SAVE_DIR, f"{task_code}_{user_code}_{file_name}")
                downloaded_file = bot.download_file(file_info.file_path)
                with open(file_path, 'wb') as f:
                    f.write(downloaded_file)

                    
            else:
                bot.reply_to(message, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect((HOST, PORT))
                    data_to_send = {
                        "task_id": task_code,
                        "participant_name": user_code
                    }
                    json_data = json.dumps(data_to_send)
                    s.sendall(json_data.encode('utf-8'))
                    response = s.recv(1024).strip()
                    verdict = json.loads(response.decode())
            except Exception as e:
                verdict = f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}"

            # –û—Ç–≤–µ—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫—É
            if verdict['result'] == '‚úÖ –í–µ—Ä–Ω–æ!':
                bot.reply_to(message, f"üìã –†–µ—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_code} –Ω–∞ –∑–∞–¥–∞—á—É {task_code}:\n{verdict['result']}")
            else:
                bot.reply_to(message, f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_code} –Ω–∞ –∑–∞–¥–∞—á—É {task_code}:\n{verdict['result']} ({verdict['comment']})")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user_id]

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        if user_id in user_states:
            del user_states[user_id]

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)