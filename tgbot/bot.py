import telebot
import os
import socket
from gigachat import GigaChat
import json
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
HOST = "127.0.0.1"
PORT = 65432

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –ø—É–±–ª–∏—á–µ–Ω!)
bot = telebot.TeleBot("8310217352:AAEJlCKcJcneY6gQ8zhDKUhRGVZCMNOZe0Q")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {user_id: {'step': ..., 'data': ...}}

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
SAVE_DIR = 'submissions'
os.makedirs(SAVE_DIR, exist_ok=True)


@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_id = message.from_user.id
    user_states[user_id] = {'step': 'waiting_task_code'}
    bot.reply_to(
        message,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"pr000001\"):",
    )

@bot.message_handler(content_types=['text', 'document'])
def handle_all_messages(message):
    user_id = message.from_user.id
    state_info = user_states.get(user_id)

    if not state_info:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    step = state_info['step']

    try:
        if step == 'waiting_task_code':
            task_code = message.text.strip()
            if not task_code:
                bot.reply_to(message, "–ö–æ–¥ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            user_states[user_id] = {'step': 'waiting_user_code', 'task_code': task_code}
            bot.reply_to(message, f"‚úÖ –ö–æ–¥ –∑–∞–¥–∞—á–∏: {task_code}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")

        elif step == 'waiting_user_code':
            user_code = message.text.strip()
            if not user_code:
                bot.reply_to(message, "–ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            user_states[user_id] = {
                'step': 'waiting_answer',
                'task_code': state_info['task_code'],
                'user_code': user_code
            }
            bot.reply_to(message, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º —Å —Ä–µ—à–µ–Ω–∏–µ–º.")

        elif step == 'waiting_answer':
            task_code = state_info['task_code']
            user_code = state_info['user_code']
            file_path = None
            answer_type = None

            if message.content_type == 'text':
                answer_text = message.text
                file_path = os.path.join(SAVE_DIR, f"{task_code}_{user_code}.txt")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(answer_text)
                answer_type = 'text'

            elif message.content_type == 'document':
                file_info = bot.get_file(message.document.file_id)
                file_name = message.document.file_name
                file_path = os.path.join(SAVE_DIR, f"{task_code}_{user_code}_{file_name}")

                downloaded_file = bot.download_file(file_info.file_path)
                with open(file_path, 'wb') as f:
                    f.write(downloaded_file)
                answer_type = 'file'
            else:
                bot.reply_to(message, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            bot.reply_to(message, f"‚úÖ {'–¢–µ–∫—Å—Ç' if answer_type == 'text' else '–§–∞–π–ª'} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...")

            # === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ===
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect((HOST, PORT))
                    print(file_path)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
                    data_to_send = {
                        "task_id": task_code,
                        "participant_name": user_code
                    }

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É JSON
                    json_data = json.dumps(data_to_send)
                    s.sendall(json_data.encode('utf-8'))
                    response = s.recv(1024).strip()
                    verdict = json.loads(response.decode())
            except Exception as e:
                verdict = f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}"

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if verdict['result'] == '‚úÖ –í–µ—Ä–Ω–æ!':
                bot.reply_to(message, f"üìã –í–µ—Ä–¥–∏–∫—Ç —Ä–µ—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_code} –Ω–∞ –∑–∞–¥–∞—á—É {task_code}:\n{verdict['result']}")
            else:
                bot.reply_to(message, f"üìã –í–µ—Ä–¥–∏–∫—Ç —Ä–µ—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_code} –Ω–∞ –∑–∞–¥–∞—á—É {task_code} (—É—á—Ç–∏—Ç–µ, —á—Ç–æ –í–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å; —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞):\n{verdict['result']}: {verdict['comment']}")
            del user_states[user_id]

        else:
            bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        if user_id in user_states:
            del user_states[user_id]


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)